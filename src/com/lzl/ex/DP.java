package com.lzl.ex;

/**
 * DP算法：动态规划算法，将多阶段的过程转化为一系列单阶段的问题，利用各阶段之间的关系，逐个求解
 * 一定包含某个局部最优解，但是不一定包含前一个局部最优解，需要记录之前的所有最优解
 * 动态规划中的非常重要的两个概念是：状态和状态转移方程
 * 状态：最终需要求解的问题，例如需要凑够的钱数假设为100最少的银币数，状态就是这种情况的表示，使用DP(100)表示
 * 状态转移方程：指定状态转移的方法
 * 贪心算法：由上一步的最优解推倒下一步的最优解，上一步的最优解不保留
 */
public class DP {
}
